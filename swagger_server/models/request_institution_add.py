# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class RequestInstitutionAdd(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, description: str=None, address: str=None, created_user: str=None):  # noqa: E501
        """RequestInstitutionAdd - a model defined in Swagger

        :param name: The name of this RequestInstitutionAdd.  # noqa: E501
        :type name: str
        :param description: The description of this RequestInstitutionAdd.  # noqa: E501
        :type description: str
        :param address: The address of this RequestInstitutionAdd.  # noqa: E501
        :type address: str
        :param created_user: The created_user of this RequestInstitutionAdd.  # noqa: E501
        :type created_user: str
        """
        self.swagger_types = {
            'name': str,
            'description': str,
            'address': str,
            'created_user': str
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'address': 'address',
            'created_user': 'createdUser'
        }
        self._name = name
        self._description = description
        self._address = address
        self._created_user = created_user

    @classmethod
    def from_dict(cls, dikt) -> 'RequestInstitutionAdd':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RequestInstitutionAdd of this RequestInstitutionAdd.  # noqa: E501
        :rtype: RequestInstitutionAdd
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this RequestInstitutionAdd.


        :return: The name of this RequestInstitutionAdd.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this RequestInstitutionAdd.


        :param name: The name of this RequestInstitutionAdd.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this RequestInstitutionAdd.


        :return: The description of this RequestInstitutionAdd.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this RequestInstitutionAdd.


        :param description: The description of this RequestInstitutionAdd.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def address(self) -> str:
        """Gets the address of this RequestInstitutionAdd.


        :return: The address of this RequestInstitutionAdd.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this RequestInstitutionAdd.


        :param address: The address of this RequestInstitutionAdd.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def created_user(self) -> str:
        """Gets the created_user of this RequestInstitutionAdd.


        :return: The created_user of this RequestInstitutionAdd.
        :rtype: str
        """
        return self._created_user

    @created_user.setter
    def created_user(self, created_user: str):
        """Sets the created_user of this RequestInstitutionAdd.


        :param created_user: The created_user of this RequestInstitutionAdd.
        :type created_user: str
        """
        if created_user is None:
            raise ValueError("Invalid value for `created_user`, must not be `None`")  # noqa: E501

        self._created_user = created_user
